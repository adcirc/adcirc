#!/bin/bash

displayUsage(){

    echo "ADCIRC Model Changelog Generator"
    echo ""
    echo "Usage:"
    echo "  ./generateChangelog.sh [OPTIONS]"
    echo ""
    echo "OPTIONS"
    echo "  -a,--all            Generate entire history. Default is to show changes since last git tag"
    echo "  -f,--file [FILE]    Set the output file. Default is 'changelog'"
    echo "  -h,--help           Print this message"
}


#...Check if git is installed
ver=$(git --version)
if [ "x$?" != "x0" ] ; then
    echo "Error: git not found."
    exit 1
fi

#...Check if this is a git repository
des=$(git describe)
if [ "x$?" != "x0" ] ; then
    echo "ERROR: Not in a git repository. Cannot generate changelog"
    exit 1
fi

#...Set some default values
doFullLog=0
outputFile=changelog

#...Parse the command line options
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --all|-a)
            doFullLog=1
            ;;
        --file|-f)
            outputFile=$2
            shift
            ;;
        --help|-h)
            displayUsage
            exit 0
            ;;
         *)
            echo "ERROR: unknown option \"$key\""
            displayUsage
            exit 1
            ;;
    esac
    shift
done

#...Header
echo "ADCIRC Model Changelog" > $outputFile
echo "" >> $outputFile
echo "Changelog generated at: $(date)" >> $outputFile
echo "Current Branch:         $(git branch | grep \* | cut -d\* -f2 | cut -c2-)" >> $outputFile
if [ "x$doFullLog" == "x1" ] ; then
    echo "Changes Since:          First commit" >> $outputFile
else
    echo "Changes Since:          $(git describe --abbrev=0)" >> $outputFile
fi
echo "Changelog generated by: $USER" >> $outputFile
echo "" >> $outputFile


#...Brief change log
echo "Brief Changelog (detailed log below):" >>  $outputFile
echo "------------------------------------------------------------------------------------|" >> $outputFile
echo "|   Commit  |         Date         |       Author        |        Description       |" >> $outputFile
echo "------------------------------------------------------------------------------------|" >> $outputFile
if [ "x$doFullLog" == "x1" ] ; then
    git log \
        --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:"|  %h  | %cd  | %<(19)%an | %<(70,trunc)%s" >> $outputFile
else
    git log $(git describe --abbrev=0)..HEAD \
        --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:"|  %h  | %cd  | %<(19)%an | %<(70,trunc)%s" >> $outputFile
fi
echo "" >> $outputFile
echo "--------------------------------------------------------------------------------|" >> $outputFile
echo ""           >> $outputFile
echo ""           >> $outputFile
echo ""           >> $outputFile
echo "Detailed Changelog" >> $outputFile

if [ "x$doFullLog" == "x1" ] ; then
    git log \
        --pretty=format:"#-----------------------------------------------------#%nCommit:  %H%nAuthor:  %an %nDate:    %ad %nSubject: %s%n%nDetailed Log (if included):%n%b%n%n#-----------------------------------------------------#%n%n" >> $outputFile
else
    git log \
        --pretty=format:"#-----------------------------------------------------#%nCommit:  %H%nAuthor:  %an %nDate:    %ad %nSubject: %s%n%nDetailed Log (if included):%n%b%n%n#-----------------------------------------------------#%n%n" \
        $(git describe --abbrev=0)..HEAD >> $outputFile
fi

#...Do a perl replace to make author names pretty
perl -w -pi -e "s/zcobell    /Zach Cobell/g" $outputFile
perl -w -pi -e "s/zcobell /Zach Cobell /g" $outputFile
perl -w -pi -e "s/caseydietrich /Casey Dietrich/g" $outputFile
perl -w -pi -e "s/atritinger      /Amanda Tritinger/g" $outputFile

exit 0
