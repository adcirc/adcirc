!>
!! @mainpage ADCIRC NUOPC Cap
!! @author Saeed Moghimi (moghimis@gmail.com)
!! @date 15/1/17 Original documentation
!------------------------------------------------------
!LOG-----------------
!
!
!

      MODULE hwrf_mod
      USE netcdf
      use esmf

      IMPLICIT NONE
      real(ESMF_KIND_R8), allocatable :: LONS(:), LATS(:),TIMES(:)
      real(ESMF_KIND_R8), allocatable :: UGRD10(:,:,:), VGRD10(:,:,:)    !structured vars
      real(ESMF_KIND_R8), allocatable :: PRMSL (:,:,:)                   !structured vars
      integer                :: nlat, nlon, ntime
      character (len = 280)  :: FILE_NAME

      ! reading data time management info 
      integer                :: wrf_int, wrf_num, wrf_den
      character (len = 280 ) :: wrf_dir, wrf_nam
      character (len = 2048) :: info
  !-----------------------------------------------------------------------
  !-----------------------------------------------------------------------
  !-------------- Read Unstructured interpolated Mesh --------------------
  ! -- Added to the module to be able to read on-mesh interpolated data -- 
  ! -- from a netcdf file and pass it to adcirc as nws=17 option.       --
  !-----------------------------------------------------------------------
  
      !> \author Ali Samii - 2016
    !! See: https://github.com/samiiali
    !! \brief This object stores the data required for construction of a parallel or serial
    !! ESMF_Mesh from <tt>fort.14, fort.18, partmesh.txt</tt> files.
    !!
   type meshdata
        !> \details vm is an ESMF_VM object.  ESMF_VM is just an ESMF virtual machine class,
        !! which we will use to get the data about the local PE and PE count.
        type(ESMF_VM)                      :: vm
        !> \details This array contains the node coordinates of the mesh. For
        !! example, in a 2D mesh, the \c jth coordinate of the \c nth node
        !! is stored in location <tt> 2*(n-1)+j</tt> of this array.
        real(ESMF_KIND_R8), allocatable    :: NdCoords(:)
        !> \details This array contains the elevation of different nodes of the mesh
        real(ESMF_KIND_R8), allocatable    :: bathymetry(:)
        !> \details Number of nodes present in the current PE. This is different from the
        !! number of nodes owned by this PE (cf. NumOwnedNd)
        integer(ESMF_KIND_I4)              :: NumNd
        !> \details Number of nodes owned by this PE. This is different from the number of
        !! nodes present in the current PE (cf. NumNd)
        integer(ESMF_KIND_I4)              :: NumOwnedNd
        !> \details Number of elements in the current PE. This includes ghost elements and
        !! owned elements. However, we do not bother to distinguish between owned
        !! element and present element (as we did for the nodes).
        integer(ESMF_KIND_I4)              :: NumEl
        !> \details Number of nodes of each element, which is simply three in 2D ADCIRC.
        integer(ESMF_KIND_I4)              :: NumND_per_El
        !> \details Global node numbers of the nodes which are present in the current PE.
        integer(ESMF_KIND_I4), allocatable :: NdIDs(:)
        !> \details Global element numbers which are present in the current PE.
        integer(ESMF_KIND_I4), allocatable :: ElIDs(:)
        !> \details The element connectivity array, for the present elements in the current PE.
        !! The node numbers are the local numbers of the present nodes. All the element
        !! connectivities are arranged in this one-dimensional array.
        integer(ESMF_KIND_I4), allocatable :: ElConnect(:)
        !> \details The number of the PE's which own each of the nodes present this PE.
        !! This number is zero-based.
        integer(ESMF_KIND_I4), allocatable :: NdOwners(:)
        !> \details An array containing the element types, which are all triangles in our
        !! application.
        integer(ESMF_KIND_I4), allocatable :: ElTypes(:)
        !> \details This is an array, which maps the indices of the owned nodes to the indices of the present
        !! nodes. For example, assume we are on <tt>PE = 1</tt>, and we have four nodes present, and the
        !! first and third nodes belong to <tt>PE = 0</tt>. So we have:
        !! \code
        !! NumNd = 4
        !! NumOwnedNd = 2
        !! NdOwners = (/0, 1, 0, 1/)
        !! NdIDs = (/2, 3, 5, 6/)
        !! owned_to_present = (/2, 4/)    <-- Because the first node owned by this PE is actually
        !!                                    the second node present on this PE, and so on.
        !! \endcode
        integer(ESMF_KIND_I4), allocatable :: owned_to_present_nodes(:)
    end type meshdata

    ! info for reading hwrf netcdf file
    logical               :: on_mesh_hwrf 
    integer               :: nnode, nelem, noel
    integer           , allocatable     :: TRI(:,:)
    real(ESMF_KIND_R8), allocatable     :: UWND (:,:), VWND(:,:), PERS (:,:)  !Un-structured vars
    character (len = 280) :: hwrf_dir, hwrf_nam
    !netcdf vars
    integer :: ncid, NOD_dimid, rec_dimid, ELM_dimid, NOE_dimid
    integer :: LON_varid, LAT_varid, rec_varid, tri_varid
    integer :: UWND_varid, VWND_varid, PERS_varid


!-----------------------------------------------------------------------
      CONTAINS

!-----------------------------------------------------------------------
!- Sub !!!????
!-----------------------------------------------------------------------
    SUBROUTINE init_hwrf_mesh_nc()
      IMPLICIT NONE
      character (len = *), parameter :: NOD_NAME    = "node"
      character (len = *), parameter :: NOE_NAME    = "noel"
      character (len = *), parameter :: ELM_NAME    = "element"
      character (len = *), parameter :: LAT_NAME    = "latitude"
      character (len = *), parameter :: LON_NAME    = "longitude"
      character (len = *), parameter :: REC_NAME    = "time"
      character (len = *), parameter :: UWND_NAME    = "uwnd"
      character (len = *), parameter :: VWND_NAME    = "vwnd"
      character (len = *), parameter :: PERS_NAME    = "P"
      character (len = *), parameter :: TRI_NAME    = "tri"

      character (len = 140)          :: units
      character(len=*),parameter :: subname='(hwrf_mod:init_hwrf_nc)'


      logical :: THERE
      integer :: lat, lon,i, iret, rc

      FILE_NAME =  TRIM(hwrf_dir)//'/'//TRIM(hwrf_nam)
      INQUIRE( FILE= FILE_NAME, EXIST=THERE )
      if ( .not. THERE)  stop 'hwrf netcdf meshfile does not exist!'

      ncid = 0
      ! Open the file.
      call check(  nf90_open(trim(FILE_NAME), NF90_NOWRITE, ncid))

      ! Get ID of the unlimited dimension
      call check( nf90_inquire(ncid, unlimitedDimId = rec_dimid) )

      ! Get ID of the limited dimensions
      call check( nf90_inq_dimid(ncid, NOD_NAME, NOD_dimid) )
      call check( nf90_inq_dimid(ncid, ELM_NAME, ELM_dimid) )
      call check( nf90_inq_dimid(ncid, NOE_NAME, NOE_dimid) )

      ! How many values of "nodes" are there?
      call check(nf90_inquire_dimension(ncid, NOD_dimid, len = nnode) )
      call check(nf90_inquire_dimension(ncid, ELM_dimid, len = nelem) )
      call check(nf90_inquire_dimension(ncid, NOE_dimid, len = noel) )
      ! What is the name of the unlimited dimension, how many records are there?
      call check(nf90_inquire_dimension(ncid, rec_dimid, len = ntime))

      print *,  ' nelem  > ',nelem , ' noel  > ' ,noel,  ' ntime > ',ntime

      ! Get the varids of the pressure and temperature netCDF variables.
      call check( nf90_inq_varid(ncid, LAT_NAME,    LAT_varid) )
      call check( nf90_inq_varid(ncid, LON_NAME,    LON_varid) )
      call check( nf90_inq_varid(ncid, REC_NAME,    rec_varid) )
      call check( nf90_inq_varid(ncid, UWND_NAME,    UWND_varid) )
      call check( nf90_inq_varid(ncid, VWND_NAME,    VWND_varid) )
      call check( nf90_inq_varid(ncid, PERS_NAME,    PERS_varid) )
      call check( nf90_inq_varid(ncid, TRI_NAME,    TRI_varid) )

      !allocate vars
      if(.not. allocated(LATS))  allocate (LATS  (1:nnode))
      if(.not. allocated(LONS))  allocate (LONS  (1:nnode))
      if(.not. allocated(TIMES)) allocate (TIMES (1:ntime))
      if(.not. allocated(TRI))   allocate (TRI (1:noel ,1:nelem))
      ! read vars
      call check(nf90_get_var(ncid, LAT_varid, LATS ))
      call check(nf90_get_var(ncid, LON_varid, LONS ))
      call check(nf90_get_var(ncid, rec_varid, TIMES))
      !call check(nf90_get_var(ncid, UWND_varid, UWND  ))
      !TODO: Why the order is other way???? Might change the whole forcing fields!!!!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IMPORTANT <<<<<
      ! plot input and out put to be sure we are not scrambling the data. the same for HWRF netcdf file
      call check(nf90_get_var(ncid, TRI_varid, TRI, start = (/1,1/),count = (/noel,nelem/)  ))

      write(info,*) subname,' --- init hwrf netcdf file  --- '
      print *, info
      call ESMF_LogWrite(info, ESMF_LOGMSG_INFO, rc=rc)

    END SUBROUTINE

!-----------------------------------------------------------------------
!- Sub !!!????
!-----------------------------------------------------------------------
    SUBROUTINE read_hwrf_mesh_nc(currTime)
      IMPLICIT NONE
      type(ESMF_Time),intent(in)     :: currTime
      type(ESMF_Time)                :: refTime
      type(ESMF_TimeInterval)        :: dTime


      character (len = 140)          :: units

      integer, parameter :: NDIMS = 2
      integer    :: start(NDIMS),count(NDIMS)
      logical    :: THERE
      real       :: delta_d_all (ntime) , delta_d_ref
      !integer   :: dimids(NDIMS)

      character  :: c1,c2,c3,c4,c5,c6,c7
      integer    :: yy,mm,dd,hh,min,ss
      integer    :: d_d, d_h, d_m, d_s
      integer    :: lat, lon,it, iret, rc

      rc = ESMF_SUCCESS

      !units = "days since 1990-01-01 00:00:00"
      call check(nf90_get_att(ncid,rec_varid,'units',units))
      READ(units,'(a4,a7,i4,a1,i2,a1,i2,a1,i2,a1,i2,a1,i2)',iostat=iret)  &
                   c1,c2,yy,c3,mm,c4,dd,c5,hh,c6,min,c7,ss

      if (iret .ne. 0) then
        print *, 'Fatal error: A non valid time units string was provided'
        stop 'hwrf_mod: read_hwrf_nc'
      end if

      call ESMF_TimeSet(refTime, yy=yy, mm=mm, dd=dd, h=hh, m=min, s=ss, rc=rc)
      if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
        line=__LINE__, &
        file=__FILE__)) &
        return  ! bail out

      dTime = currTime - refTime
      call ESMF_TimeIntervalGet (dTime, d=d_d, h=d_h, m=d_m, s=d_s, rc=rc)
      if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
        line=__LINE__, &
        file=__FILE__)) &
        return  ! bail out

      delta_d_ref = d_d + d_h /24.0 + d_m / (24.0 * 60.0) +  d_s / (24.0 * 3600.0)

      do it = 1, ntime
        delta_d_all(it) =  delta_d_ref - TIMES (it)
      end do

      it = minloc(abs(delta_d_all),dim=1)

      !it = 1
      print *, 'wave file it index > ',it

      !alocate vars
      if(.not. allocated(UWND))   allocate (UWND (1:nnode,1))
      if(.not. allocated(VWND))   allocate (VWND (1:nnode,1))
      if(.not. allocated(PERS))   allocate (PERS (1:nnode,1))

      start = (/ 1   , it/)
      count = (/nnode, 1 /)  !for some reason the order here is otherway around?!

      print *, start+count
      print *,size(UWND(ntime,:))
      call check( nf90_get_var(ncid,UWND_varid, UWND, start, count) )
      call check( nf90_get_var(ncid,VWND_varid, VWND, start, count) )
      call check( nf90_get_var(ncid,PERS_varid, PERS, start, count) )

      !print *,FILE_NAME , '   HARD CODED for NOWWWW>>>>>     Time index from wave file is > ', it, UWND(1:10,1)

    !
    END SUBROUTINE

    !-------------------------------------------------------------------------------
    subroutine construct_meshdata_from_netcdf(the_data)
        implicit none
        integer                               :: i1
        integer, parameter                    :: dim1=2, spacedim=2, NumND_per_El=3
        type(meshdata), intent(inout)         :: the_data
        the_data%NumEl = nelem
        the_data%NumNd = nnode
        allocate(the_data%NdIDs(the_data%NumNd))
        allocate(the_data%ElIDs(the_data%NumEl))
        allocate(the_data%NdCoords(dim1*the_data%NumNd))
        allocate(the_data%bathymetry(the_data%NumNd))
        allocate(the_data%ElConnect(NumND_per_El*the_data%NumEl))
        allocate(the_data%NdOwners(the_data%NumNd))
        allocate(the_data%ElTypes(the_data%NumEl))
        allocate(the_data%owned_to_present_nodes(the_data%NumNd))

        do i1 = 1, the_data%NumNd, 1
                the_data%NdIDs(i1)                 = i1
                the_data%NdCoords((i1-1)*dim1 + 1) = LONS(i1)
                the_data%NdCoords((i1-1)*dim1 + 2) = LATS(i1)
        end do
        do i1 = 1, the_data%NumEl, 1
                the_data%ElIDs(i1)                        =   i1
                the_data%ElConnect((i1-1)*NumND_per_El+1) = TRI(1,i1)
                the_data%ElConnect((i1-1)*NumND_per_El+2) = TRI(2,i1)
                the_data%ElConnect((i1-1)*NumND_per_El+3) = TRI(3,i1)
        end do
        !We have only one node therefore:
        the_data%NdOwners = 0                  !process 0 owns all the nodes
        the_data%NumOwnedND = the_data%NumNd   !number of nodes = number of owned nodes
        the_data%owned_to_present_nodes = the_data%NdIDs

        the_data%ElTypes = ESMF_MESHELEMTYPE_TRI

        close(14)
    end subroutine

!-------------------------------------------------------------------------
!    subroutine update_hwrf_filename (YY, MM, DD, H)
!        integer             :: YY, MM, DD, H
!        CHARACTER(len=280)      :: inps     ! provide outs with extra 100 char len
!        CHARACTER(len=4)        :: year
!        CHARACTER(len=2)        :: mon,day
!        CHARACTER(len=3)        :: hours

!        ! example:  hwrf_nam: hwrf.Constant.YYYYMMDD_PERS.nc
!        inps = trim(hwrf_nam)

!        write(year,"(I4.4)") YY
!        inps =  Replace_Text (inps,'YYYY',year)

!        write(mon,"(I2.2)")  MM
!        inps =  Replace_Text (inps,'MM',mon)

!        write(day,"(I2.2)")  DD
!        inps =  Replace_Text (inps,'DD',day)

        !past hours from start date
        !write(hours,"(I3.3)") H
        !inps =  Replace_Text (inps,'HHH',hours)

!        FILE_NAME =  TRIM(hwrf_dir)//'/'//TRIM(inps)

!    END subroutine update_hwrf_filename



    !> \author Ali Samii - 2016
    !! See: https://github.com/samiiali
    !> @details Using the data available in <tt> fort.14, fort.18, partmesh.txt</tt> files
    !! this function extracts the scalars and arrays required for construction of a
    !! meshdata object.
    !! After calling this fucntion, one can call create_parallel_esmf_mesh_from_meshdata()
    !! or create_masked_esmf_mesh_from_data() to create an ESMF_Mesh.
    !! @param vm This is an ESMF_VM object, which will be used to obtain the \c localPE
    !! and \c peCount of the \c MPI_Communicator.
    !! @param global_fort14_dir This is the directory path (relative to the executable
    !! or an absolute path) which contains the global \c fort.14 file (not the fort.14
    !! after decomposition).
    !! @param the_data This is the output meshdata object.
    !!

    !> \details As the name of this function suggests, this funciton creates a parallel
    !! ESMF_Mesh from meshdata object. This function should be called collectively by
    !! all PEs for the parallel mesh to be created. The function, extract_parallel_data_from_mesh()
    !! should be called prior to calling this function.
    !! \param the_data This the input meshdata object.
    !! \param out_esmf_mesh This is the ouput ESMF_Mesh object.
    subroutine create_parallel_esmf_mesh_from_meshdata(the_data, out_esmf_mesh)
        implicit none
        type(ESMF_Mesh), intent(out)                  :: out_esmf_mesh
        type(meshdata), intent(in)                    :: the_data
        integer, parameter                            :: dim1=2, spacedim=2, NumND_per_El=3
        integer                                       :: rc
        out_esmf_mesh=ESMF_MeshCreate(parametricDim=dim1, spatialDim=spacedim, &
            nodeIDs=the_data%NdIDs, nodeCoords=the_data%NdCoords, &
            nodeOwners=the_data%NdOwners, elementIDs=the_data%ElIDs, &
            elementTypes=the_data%ElTypes, elementConn=the_data%ElConnect, &
            rc=rc)

        if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
            line=__LINE__, &
            file=__FILE__)) &
            return  ! bail out

    end subroutine


  
  


!----------------------------------------------------------------------
!----------------------    Structured GRID of HWRF --------------------
!-----------------------------------------------------------------------
!- Sub !!!????
!-----------------------------------------------------------------------
    SUBROUTINE read_hwrf_grid_nc()
      ! Read original netcdf file derived from grib2 outputs of HWRF model
      ! using wgrib bash script
      !

      IMPLICIT NONE
      character (len = *), parameter :: LAT_NAME    = "latitude"
      character (len = *), parameter :: LON_NAME    = "longitude"
      character (len = *), parameter :: REC_NAME    = "time"
      character (len = *), parameter :: PRMSL_NAME  = "PRMSL_meansealevel"
      character (len = *), parameter :: UGRD10_NAME = "UGRD_10maboveground"
      character (len = *), parameter :: VGRD10_NAME = "VGRD_10maboveground"
      integer :: ncid, LON_dimid, LAT_dimid, rec_dimid
      integer :: PRMSL_dimid, UGRD10_dimid, VGRD10_dimid

      integer, parameter :: NDIMS = 3
      integer :: LON_varid, LAT_varid, rec_varid
      integer :: PRMSL_varid, UGRD10_varid, VGRD10_varid
      integer :: start(NDIMS),count(NDIMS)
      logical :: THERE
      !integer :: dimids(NDIMS)

      integer :: lat, lon,i, iret
      print *, FILE_NAME
      INQUIRE( FILE= FILE_NAME, EXIST=THERE ) 
      if ( .not. THERE)  stop 'HWRF file does not exist !'

      ncid = 0
      ! Open the file.
      call check(  nf90_open(trim(FILE_NAME), NF90_NOWRITE, ncid))
      
      ! Get ID of unlimited dimension
      call check( nf90_inquire(ncid, unlimitedDimId = rec_dimid) )

      ! Get ID of limited dimension
      call check( nf90_inq_dimid(ncid, LON_NAME, LON_dimid) )
      call check( nf90_inq_dimid(ncid, LAT_NAME, LAT_dimid) )

      ! How many values of "lat" are there?
      call check(nf90_inquire_dimension(ncid, lon_dimid, len = nlon) )
      call check(nf90_inquire_dimension(ncid, lat_dimid, len = nlat) )

      ! What is the name of the unlimited dimension, how many records are there?
      call check(nf90_inquire_dimension(ncid, rec_dimid, len = ntime))

      ! Get the varids of the pressure and temperature netCDF variables.
      call check( nf90_inq_varid(ncid, LAT_NAME,    LAT_varid) )
      call check( nf90_inq_varid(ncid, LON_NAME,    LON_varid) )
      call check( nf90_inq_varid(ncid, REC_NAME,    rec_varid) )
      call check( nf90_inq_varid(ncid, PRMSL_NAME,  PRMSL_varid) )
      call check( nf90_inq_varid(ncid, UGRD10_NAME, UGRD10_varid) )
      call check( nf90_inq_varid(ncid, VGRD10_NAME, VGRD10_varid) )
      !print *, ntime,nlat,nlon
      !allocate vars
      if(.not. allocated(LATS))   allocate (LATS  (1:nlat))
      if(.not. allocated(LONS))   allocate (LONS  (1:nlon))
      if(.not. allocated(TIMES))  allocate (TIMES (1:ntime))
      if(.not. allocated(UGRD10)) allocate (UGRD10(nlon,nlat,ntime))
      if(.not. allocated(VGRD10)) allocate (VGRD10(nlon,nlat,ntime))
      if(.not. allocated(PRMSL))  allocate (PRMSL (nlon,nlat,ntime))
      ! read vars
      call check(nf90_get_var(ncid, LAT_varid, LATS))
      call check(nf90_get_var(ncid, LON_varid, LONS))
      call check(nf90_get_var(ncid, rec_varid, TIMES))
      !TODO: Why the order is other way???? Might change the whole forcing fields!!!!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IMPORTANT <<<<<
      !TODO: plot input and output<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      start = (/ 1, 1, 1/)
      count = (/nlon,nlat,ntime/)
      print *, 'nlon > ',nlon,' nlat > ',nlat,' ntime > ',ntime
      print *, start+count
      !!!